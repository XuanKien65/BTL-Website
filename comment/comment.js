document.addEventListener("DOMContentLoaded", function () {
    const toggleBtn = document.getElementById("toggle-btn");
    const sidebar = document.getElementById("sidebar");


    toggleBtn.addEventListener("click", function () {
        sidebar.classList.toggle("expand");
    });

});
function setupUserDropdown() {
    const dropdownButton = document.getElementById('userDropdown');
   
    // T·∫°o dropdown menu
    const dropdownMenu = document.createElement('ul');
    dropdownMenu.className = 'dropdown-menu dropdown-menu-end';
    dropdownMenu.innerHTML = `
        <li>
            <div class="dropdown-item-text">
                <div class="d-flex align-items-center p-2">
                    <img src="https://img.freepik.com/premium-vector/avatar-icon0002_750950-43.jpg" class="rounded-circle" width="50" alt="User">
                    <div class="ms-3">
                        <h6 class="mb-0">${getUserName()}</h6>
                        <small class="text-muted">Administrator</small>
                    </div>
                </div>
            </div>
        </li>
        <li><hr class="dropdown-divider"></li>
        <li>
            <a class="dropdown-item d-flex align-items-center" href="#">
                <span class="material-icons me-2">person</span>
                Th√¥ng tin c√° nh√¢n
            </a>
        </li>
        <li>
            <a class="dropdown-item d-flex align-items-center" href="#">
                <span class="material-icons me-2">settings</span>
                C√†i ƒë·∫∑t t√†i kho·∫£n
            </a>
        </li>
        <li><hr class="dropdown-divider"></li>
        <li>
            <a class="dropdown-item d-flex align-items-center text-danger" href="#">
                <span class="material-icons me-2">help</span>
                Tr·ª£ gi√∫p
            </a>
        </li>
    `;
   
    // Ch√®n dropdown menu v√†o sau button
    dropdownButton.after(dropdownMenu);


    // X·ª≠ l√Ω s·ª± ki·ªán click cho c√°c menu items
    dropdownMenu.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const action = e.currentTarget.textContent.trim();
           
            switch(action) {
                case 'Th√¥ng tin c√° nh√¢n':
                    console.log('M·ªü trang th√¥ng tin c√° nh√¢n');
                    // Th√™m code chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang th√¥ng tin c√° nh√¢n
                    break;
                   
                case 'C√†i ƒë·∫∑t t√†i kho·∫£n':
                    console.log('M·ªü trang c√†i ƒë·∫∑t');
                    // Th√™m code chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang c√†i ƒë·∫∑t
                    break;
            }
        });
    });
}


// H√†m l·∫•y t√™n ng∆∞·ªùi d√πng - c√≥ th·ªÉ thay ƒë·ªïi theo logic c·ªßa b·∫°n
function getUserName() {
    // T·∫°m th·ªùi return gi√° tr·ªã m·∫∑c ƒë·ªãnh
    // Sau n√†y c√≥ th·ªÉ l·∫•y t·ª´ session/localStorage ho·∫∑c API
    return "Admin User";
}


// H√†m l·∫•y icon theo th·ªùi gian
function getTimeIcon() {
    const hour = new Date().getHours();
   
    if (hour >= 5 && hour < 12) {
        return "‚òÄÔ∏è"; // Icon m·∫∑t tr·ªùi cho bu·ªïi s√°ng
    } else if (hour >= 12 && hour < 18) {
        return "üå§Ô∏è"; // Icon m·∫∑t tr·ªùi c√≥ m√¢y cho bu·ªïi chi·ªÅu
    } else {
        return '<span class="material-icons moon-icon">nightlight</span>'; // Icon m·∫∑t trƒÉng x√°m
    }
}


// H√†m l·∫•y l·ªùi ch√†o theo th·ªùi gian
function getGreeting() {
    const hour = new Date().getHours();
    const userName = getUserName();
    let greetingText = '';
    let timeText = '';
   
    if (hour >= 5 && hour < 12) {
        greetingText = "Ch√†o bu·ªïi s√°ng";
        timeText = "Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!";
    } else if (hour >= 12 && hour < 18) {
        greetingText = "Ch√†o bu·ªïi chi·ªÅu";
        timeText = "Ch√∫c b·∫°n l√†m vi·ªác hi·ªáu qu·∫£!";
    } else {
        greetingText = "Ch√†o bu·ªïi t·ªëi";
        timeText = "Ch√∫c b·∫°n ngh·ªâ ng∆°i th·∫≠t t·ªët!";
    }


    return {
        icon: getTimeIcon(),
        greeting: greetingText,
        name: userName,
        message: timeText
    };
}


// H√†m c·∫≠p nh·∫≠t l·ªùi ch√†o
function updateGreeting() {
    const greetingContainer = document.querySelector('.greeting-container');
    const greetingData = getGreeting();
   
    // T·∫°o HTML cho l·ªùi ch√†o
    const greetingHTML = `
        <div class="greeting-content">
            <div class="greeting-icon">${greetingData.icon}</div>
            <div class="greeting-text">
                <div class="greeting-main">
                    <span class="greeting">${greetingData.greeting}</span>
                    <span class="user-name">${greetingData.name}</span>
                </div>
                <div class="greeting-message">${greetingData.message}</div>
            </div>
        </div>
    `;
   
    greetingContainer.innerHTML = greetingHTML;
}


// Kh·ªüi t·∫°o khi trang ƒë∆∞·ª£c load
document.addEventListener('DOMContentLoaded', function() {
    updateGreeting();
   
    // C·∫≠p nh·∫≠t l·ªùi ch√†o m·ªói ph√∫t
    setInterval(updateGreeting, 60000);
    setupUserDropdown();
});


// Th√™m s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t l·ªùi ch√†o khi tab ƒë∆∞·ª£c focus l·∫°i
document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
        updateGreeting();
    }
});


// D·ªØ li·ªáu m·∫´u
const commentsData = [
    {
        id: 1,
        user: "Nguy·ªÖn VƒÉn A",
        post: "C√°ch x√¢y d·ª±ng website nƒÉm 2025",
        comment: "B√†i vi·∫øt r·∫•t hay! T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu v·ªÅ ph√°t tri·ªÉn web.",
        date: "2025-03-15",
        status: "approved"
    },
    {
        id: 2,
        user: "Tr·∫ßn Th·ªã B",
        post: "10 m·∫πo ƒë·ªÉ SEO t·ªët h∆°n",
        comment: "T√¥i kh√¥ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÉm s·ªë 5. Theo kinh nghi·ªám c·ªßa t√¥i, m·∫≠t ƒë·ªô t·ª´ kh√≥a v·∫´n quan tr·ªçng cho th·ª© h·∫°ng.",
        date: "2025-03-14",
        status: "pending"
    },
    {
        id: 3,
        user: "L√™ VƒÉn C",
        post: "Gi·ªõi thi·ªáu v·ªÅ JavaScript",
        comment: "H∆∞·ªõng d·∫´n n√†y qu√° c∆° b·∫£n. T√¥i ƒë√£ mong ƒë·ª£i c√°c kh√°i ni·ªám n√¢ng cao h∆°n.",
        date: "2025-03-13",
        status: "approved"
    },
    {
        id: 4,
        user: "Ph·∫°m Th·ªã D",
        post: "C√°ch x√¢y d·ª±ng website nƒÉm 2025",
        comment: "T√¥i ƒë√£ l√†m theo h∆∞·ªõng d·∫´n c·ªßa b·∫°n nh∆∞ng b·ªã m·∫Øc k·∫πt ·ªü ph·∫ßn hosting. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m chi ti·∫øt kh√¥ng?",
        date: "2025-03-12",
        status: "pending"
    },
    {
        id: 5,
        user: "Ho√†ng VƒÉn E",
        post: "T∆∞∆°ng lai c·ªßa ph√°t tri·ªÉn web",
        comment: "Quan ƒëi·ªÉm th√∫ v·ªã! T√¥i nghƒ© AI s·∫Ω ƒë√≥ng vai tr√≤ l·ªõn h∆°n nhi·ªÅu so v·ªõi d·ª± ƒëo√°n c·ªßa b·∫°n.",
        date: "2025-03-11",
        status: "approved"
    },
    {
        id: 6,
        user: "Ng√¥ Th·ªã F",
        post: "CSS Grid so v·ªõi Flexbox",
        comment: "So s√°nh n√†y th·ª±c s·ª± gi√∫p t√¥i hi·ªÉu khi n√†o n√™n s·ª≠ d·ª•ng t·ª´ng h·ªá th·ªëng b·ªë c·ª•c. C·∫£m ∆°n b·∫°n!",
        date: "2025-03-10",
        status: "approved"
    },
    {
        id: 7,
        user: "V≈© VƒÉn G",
        post: "10 m·∫πo ƒë·ªÉ SEO t·ªët h∆°n",
        comment: "T√¥i ƒë√£ √°p d·ª•ng nh·ªØng m·∫πo n√†y trong m·ªôt th√°ng v√† l∆∞u l∆∞·ª£ng truy c·∫≠p c·ªßa t√¥i ƒë√£ tƒÉng 30%!",
        date: "2025-03-09",
        status: "approved"
    },
    {
        id: 8,
        user: "Mai Th·ªã H",
        post: "Gi·ªõi thi·ªáu v·ªÅ JavaScript",
        comment: "C√≥ l·ªói ch√≠nh t·∫£ trong v√≠ d·ª• m√£ cho ph·∫ßn tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán.",
        date: "2025-03-08",
        status: "pending"
    },
    {
        id: 9,
        user: "ƒêinh VƒÉn I",
        post: "T∆∞∆°ng lai c·ªßa ph√°t tri·ªÉn web",
        comment: "B√†i vi·∫øt n√†y ch·ª©a th√¥ng tin sai l·ªách. WebAssembly kh√¥ng ho·∫°t ƒë·ªông nh∆∞ c√°ch b·∫°n m√¥ t·∫£.",
        date: "2025-03-07",
        status: "rejected"
    },
    {
        id: 10,
        user: "L√Ω Th·ªã K",
        post: "CSS Grid so v·ªõi Flexbox",
        comment: "B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu v√≠ d·ª• v·ªÅ b·ªë c·ª•c responsive s·ª≠ d·ª•ng Grid kh√¥ng?",
        date: "2025-03-06",
        status: "approved"
    }
];

// C√°c ph·∫ßn t·ª≠ DOM
const commentTableBody = document.getElementById('comments-table-body');
const searchInput = document.getElementById('search-comments');
const filterButtons = document.querySelectorAll('.filter-btn');
const commentModal = document.getElementById('comment-modal');
const modalClose = document.querySelector('.modal-close');
const btnClose = document.getElementById('btn-close');
const btnApprove = document.getElementById('btn-approve');
const btnReject = document.getElementById('btn-reject');

// B·ªô l·ªçc hi·ªán t·∫°i
let currentFilter = 'all';
let currentCommentId = null;

// T·∫£i th·ªëng k√™
function loadStats() {
    const total = commentsData.length;
    const pending = commentsData.filter(comment => comment.status === 'pending').length;
    const approved = commentsData.filter(comment => comment.status === 'approved').length;
    const rejected = commentsData.filter(comment => comment.status === 'rejected').length;

    document.getElementById('total-comments').textContent = total;
    document.getElementById('pending-comments').textContent = pending;
    document.getElementById('approved-comments').textContent = approved;
    document.getElementById('rejected-comments').textContent = rejected;
}

// T·∫£i b√¨nh lu·∫≠n
function loadComments() {
    // X√≥a b·∫£ng
    commentTableBody.innerHTML = '';

    // L·ªçc b√¨nh lu·∫≠n
    let filteredComments = commentsData;
    
    // √Åp d·ª•ng b·ªô l·ªçc tr·∫°ng th√°i
    if (currentFilter !== 'all') {
        filteredComments = commentsData.filter(comment => comment.status === currentFilter);
    }
    
    // √Åp d·ª•ng b·ªô l·ªçc t√¨m ki·∫øm
    const searchTerm = searchInput.value.toLowerCase();
    if (searchTerm) {
        filteredComments = filteredComments.filter(comment => 
            comment.user.toLowerCase().includes(searchTerm) || 
            comment.post.toLowerCase().includes(searchTerm) || 
            comment.comment.toLowerCase().includes(searchTerm)
        );
    }

    // Hi·ªÉn th·ªã b√¨nh lu·∫≠n
    filteredComments.forEach(comment => {
        const row = document.createElement('tr');
        
        // √Ånh x·∫° tr·∫°ng th√°i sang ti·∫øng Vi·ªát
        let statusText = "";
        switch(comment.status) {
            case "pending": statusText = "Ch·ªù duy·ªát"; break;
            case "approved": statusText = "ƒê√£ duy·ªát"; break;
            case "rejected": statusText = "ƒê√£ t·ª´ ch·ªëi"; break;
        }
        
        row.innerHTML = `
            <td>${comment.id}</td>
            <td>${comment.user}</td>
            <td>${comment.post}</td>
            <td class="comment-content">${comment.comment}</td>
            <td>${formatDate(comment.date)}</td>
            <td><span class="comment-status status-${comment.status}">${statusText}</span></td>
            <td class="comment-actions">
                <button class="action-btn btn-view" data-id="${comment.id}">Xem</button>
                ${comment.status === 'pending' ? `
                    <button class="action-btn btn-approve" data-id="${comment.id}">Duy·ªát</button>
                    <button class="action-btn btn-reject" data-id="${comment.id}">T·ª´ ch·ªëi</button>
                ` : ''}
            </td>
        `;
        commentTableBody.appendChild(row);
    });

    // Th√™m tr√¨nh nghe s·ª± ki·ªán cho c√°c n√∫t h√†nh ƒë·ªông
    document.querySelectorAll('.btn-view').forEach(btn => {
        btn.addEventListener('click', () => openCommentModal(parseInt(btn.dataset.id)));
    });

    document.querySelectorAll('.btn-approve').forEach(btn => {
        btn.addEventListener('click', () => approveComment(parseInt(btn.dataset.id)));
    });

    document.querySelectorAll('.btn-reject').forEach(btn => {
        btn.addEventListener('click', () => rejectComment(parseInt(btn.dataset.id)));
    });
}

// ƒê·ªãnh d·∫°ng ng√†y
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
}

// M·ªü modal b√¨nh lu·∫≠n
function openCommentModal(commentId) {
    const comment = commentsData.find(c => c.id === commentId);
    if (!comment) return;

    currentCommentId = commentId;

    document.getElementById('modal-user').textContent = comment.user;
    document.getElementById('modal-post').textContent = comment.post;
    document.getElementById('modal-comment').textContent = comment.comment;
    document.getElementById('modal-date').textContent = formatDate(comment.date);
    
    // √Ånh x·∫° tr·∫°ng th√°i sang ti·∫øng Vi·ªát
    let statusText = "";
    switch(comment.status) {
        case "pending": statusText = "Ch·ªù duy·ªát"; break;
        case "approved": statusText = "ƒê√£ duy·ªát"; break;
        case "rejected": statusText = "ƒê√£ t·ª´ ch·ªëi"; break;
    }
    document.getElementById('modal-status').textContent = statusText;
    
    // Hi·ªÉn th·ªã/·∫©n c√°c n√∫t duy·ªát/t·ª´ ch·ªëi d·ª±a tr√™n tr·∫°ng th√°i
    if (comment.status === 'pending') {
        btnApprove.style.display = 'inline-block';
        btnReject.style.display = 'inline-block';
    } else {
        btnApprove.style.display = 'none';
        btnReject.style.display = 'none';
    }

    commentModal.style.display = 'flex';
}

// ƒê√≥ng modal b√¨nh lu·∫≠n
function closeCommentModal() {
    commentModal.style.display = 'none';
    currentCommentId = null;
}

// Duy·ªát b√¨nh lu·∫≠n
function approveComment(commentId) {
    const commentIndex = commentsData.findIndex(c => c.id === commentId);
    if (commentIndex !== -1) {
        commentsData[commentIndex].status = 'approved';
        loadStats();
        loadComments();
        if (currentCommentId === commentId) {
            closeCommentModal();
        }
    }
}

// T·ª´ ch·ªëi b√¨nh lu·∫≠n
function rejectComment(commentId) {
    const commentIndex = commentsData.findIndex(c => c.id === commentId);
    if (commentIndex !== -1) {
        commentsData[commentIndex].status = 'rejected';
        loadStats();
        loadComments();
        if (currentCommentId === commentId) {
            closeCommentModal();
        }
    }
}

// Tr√¨nh nghe s·ª± ki·ªán
searchInput.addEventListener('input', loadComments);

filterButtons.forEach(button => {
    button.addEventListener('click', () => {
        // C·∫≠p nh·∫≠t b·ªô l·ªçc ho·∫°t ƒë·ªông
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentFilter = button.dataset.filter;
        loadComments();
    });
});

// Tr√¨nh nghe s·ª± ki·ªán modal
modalClose.addEventListener('click', closeCommentModal);
btnClose.addEventListener('click', closeCommentModal);
btnApprove.addEventListener('click', () => approveComment(currentCommentId));
btnReject.addEventListener('click', () => rejectComment(currentCommentId));

// Kh·ªüi t·∫°o
loadStats();
loadComments();